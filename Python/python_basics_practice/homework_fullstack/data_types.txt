Неизменяемые (immutable) типы данных в Python

Неизменяемые типы данных - это такие типы, объекты которых нельзя изменить после создания.
 При попытке "изменить" такой объект фактически создаётся новый объект с новым значением.

    Основные неизменяемые типы в Python:
- int (целые числа)
- float (числа с плавающей точкой)
- bool (логические значения)
- str (строки)
- tuple (кортежи)
- frozenset (неизменяемое множество)
- bytes (байтовые строки)

    Примеры и особенности:

Целые числа (int):
x = 10
y = x  # y тоже ссылается на 10
x += 5  # Создаётся новый объект 15, x теперь ссылается на него
# y остаётся 10

Строки (str):
s = "hello"
s[0] = 'H'  # Вызовет ошибку TypeError
# Чтобы "изменить" строку, нужно создать новую:
s = 'H' + s[1:]  # "Hello"

Кортежи (tuple):
t = (1, 2, 3)
t[0] = 5  # Вызовет ошибку TypeError
# Можно только создать новый кортеж:
t = (5,) + t[1:]  # (5, 2, 3)

    Почему неизменяемость важна?
- Безопасность: данные не могут быть случайно изменены
- Хешируемость: неизменяемые объекты могут быть ключами словарей
- Потокобезопасность: можно использовать в многопоточных приложениях
- Оптимизация: Python может кэшировать и повторно использовать неизменяемые объекты

    Как проверить, является ли тип неизменяемым?
Попробуйте изменить объект - если получаете TypeError, тип неизменяемый.
Также можно использовать функцию id() для наблюдения за изменением идентификатора объекта.

    Особенности работы с неизменяемыми типами:
- Операции, которые "изменяют" неизменяемые объекты, на самом деле создают новые объекты
- Это может влиять на производительность при интенсивных операциях
- Для "изменения" таких объектов нужно использовать специальные приёмы (например, срезы для строк)