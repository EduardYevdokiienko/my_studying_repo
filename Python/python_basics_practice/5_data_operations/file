# **Операции с данными**: Арифметические операции, операции сравнения, логические операции.

### **Операции с данными в Python**

После знакомства с переменными и типами данных, важно понять, как можно манипулировать этими данными.
В Python есть различные операции для работы с данными: арифметические, сравнения и логические операции.

### Арифметические операции

Арифметические операции позволяют выполнять математические расчеты с числами.

- **Сложение** (**`+`**): Складывает два числа.
- **Вычитание** (`-`): Вычитает одно число из другого.
- **Умножение** (`*`): Умножает два числа.
- **Деление** (**`/`**): Делит одно число на другое, результат — всегда вещественное число.
- **Целочисленное деление** (**`//`**): Деление с округлением результата до ближайшего меньшего целого числа.
- **Остаток от деления** (**`%`**): Возвращает остаток от деления.
- **Возведение в степень** (`**`): Возводит число в заданную степень.

Примеры:

```python
summ = 10 + 5             # 15
difference = 10 - 5       # 5
product = 10 * 5          # 50
quotient = 10 / 5         # 2.0
floor_division = 10 // 3  # 3
remainder = 10 % 3        # 1
power = 10 ** 2           # 100

print("Привет, " + "мир!")  # Выведет: Привет, мир!
print("повтор" * 3)  # Выведет: повторповторповтор
```

### Операции сравнения

Операции сравнения используются для сравнения двух значений и возвращают логическое значение (**`True`** или **`False`**).

- **Равно** (**`==`**): Проверяет, равны ли два значения.
- **Не равно** (**`!=`**): Проверяет, не равны ли два значения.
- **Больше** (**`>`**), **Меньше** (**`<`**), **Больше или равно** (**`>=`**), **Меньше или равно** (**`<=`**):
Сравнивают два значения.

Примеры:

```python
is_equal = 5 == 5      # True
is_not_equal = 5 != 2  # True
is_greater = 5 > 3     # True
is_less = 5 < 3        # False
```

**Операции сравнения с `None`**

Для проверки значения на **`None`** обычно используется оператор сравнения **`is`** или **`is not`**,
а не **`==`** или **`!=`**. Это обеспечивает точное сравнение с **`None`**

```python
result = None
print(result is None)     # True
print(result is not None) # False
```

### Логические операции

Логические операции позволяют комбинировать логические значения и условия.

- **И** (**`and`**): Возвращает **`True`**, если оба условия истинны.
- **ИЛИ** (**`or`**): Возвращает **`True`**, если хотя бы одно из условий истинно.
- **НЕ** (**`not`**): Инвертирует логическое значение.

Примеры:

```python
number_one = 22
number_two = 58
result = number_one > 21 and number_two == 58
print(result)  # True

'''
В данном случае оператор and сравнивает результаты двух выражений:
age > 21 weight == 58
И если оба этих выражений возвращают True, то оператор and также возвращает True
'''
```

Так же мы можем делать различные операции внутри при передаче аргументов внутрь функции. Рассмотрим на примере `print()`

```python
# Сложение
print("10 + 5 =", 10 + 5)

# Равно
print("5 == 5:", 5 == 5)

# И (AND)
print("True and False:", True and False)
```

- Больше примеров по логическим операциям

    ```python
    '''Логическое И (AND)'''
    print(True and True)  # Выведет: True
    print(True and False)  # Выведет: False
    print(False and True)  # Выведет: False
    print(False and False)  # Выведет: False

    '''Логическое ИЛИ (OR)'''
    print(True or True)  # Выведет: True
    print(True or False)  # Выведет: True
    print(False or True)  # Выведет: True
    print(False or False)  # Выведет: False

    '''Логическое НЕ (NOT)'''
    print(not True)  # Выведет: False
    print(not False)  # Выведет: True

    '''Комбинирование логических операций'''
    # Комбинируем AND и OR
    print((True or False) and (False or False))  # Выведет: False
    ```


### ASSERT

Ключевое слово `assert` в Python предназначено для проверки истинности определенных условий в коде.
Если условие, проверяемое с помощью assert, ложно, программа автоматически прерывается

Определение и использование
Определение: `assert` — это инструкция для проверки условий, которая помогает обеспечить корректность работы программы.

Использование: `assert` используется для автоматической проверки истинности условий. Если проверяемое условие истинно,
программа продолжает свою работу. Если условие ложно, программа автоматически прерывается,
что указывает на наличие ошибки.

Синтаксис без сообщения об ошибке
`assert логическое выражение, которое проверяется на истинность`

**Пример** 1: Проверка, что число положительное:

```python
number = 10
assert number > 0
'''Если number положительное, программа продолжит работу
иначе выполнение программы прервется
'''
```

**Пример** 2: Убедиться, что список не пуст

```python
items = [1, 2, 3]
assert len(items) > 0

'''Здесь assert проверяет, что список items не пуст'''
```

**Пример** 3: Проверка истинности выражения

```python
is_valid = True
assert is_valid
'''В этом примере assert используется для проверки,
что значение переменной is_valid истинно'''
```

Зачем использовать
В последствии когда мы будем писать автотесты, наши тесты смогут проходить либо успешно,
либо “падать” (завершаться с ошибкой). Как раз таки именно эти проверки - наш основной инструмент для проверки логики.