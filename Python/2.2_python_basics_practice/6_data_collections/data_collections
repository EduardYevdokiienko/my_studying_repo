# **Коллекции данных**: Списки, словари, кортежи, множества — создание, доступ к элементам, базовые операции.

### **Массивы в Python (Списки)**

Массивов в классическом понимании в Python нет, но есть списки, которые выполняют аналогичную функцию —
упорядоченную коллекцию элементов.

Создание списка:

```python
fruits = ["яблоко", "банан", "вишня"]
```

Основные методы работы со списками:

- **Добавление элемента**:

    ```python
    fruits = ["яблоко", "банан", "вишня"]
    fruits.append("апельсин")
    print(fruits) #["яблоко", "банан", "вишня", "апельсин"]
    ```

- **Удаление элемента**:

    ```python
    fruits = ["яблоко", "банан", "вишня"]
    fruits.remove("банан")
    print(fruits) #["яблоко", "вишня"]
    ```

- **Доступ к элементу** по индексу:

    ```python
    fruits = ["яблоко", "банан", "вишня"]
    print(fruits[0])  # Выведет: яблоко
    ```

- **Доступ к элементу** по срезу индекса:

```python
fruits = ["яблоко", "банан", "вишня"]
print(fruits[0:1])  # Выведет: яблоко
print(fruits[0:2])  # Выведет: яблоко, банан
print(fruits[0:3])  # Выведет: яблоко, банан, вишня
```

- **Изменение элемента**:

    ```python
    fruits = ["яблоко", "банан", "вишня"]
    fruits[2] = "груша"
    print(fruits)  #["яблоко", "банан", "груша"]
    ```

- Узнаем длину списка:

    ```python
    fruits = ["яблоко", "банан", "вишня"]
    len_list = len(fruits)
    print(len_list) # выведет 3

      # можно сделать проще - сразу передав len(list) в виде аргумента в функцию print()
      print(len(fruits))
    ```

    Списки в python могут содержать в себе различные типы данных:


```python
mixed_list = ["Алиса", 30, 1.75, True, [1, 2, 3], {"key": "value"}, (4, 5, 6)]

print(mixed_list)  # Выведет ['Алиса', 30, 1.75, True, [1, 2, 3], {'key': 'value'}, (4, 5, 6)]
```

### **Словари**

Словарь в Python — это неупорядоченная коллекция элементов, где каждый элемент хранится как пара ключ-значение.

Создание словаря:

```python
person = {"имя": "Алиса", "возраст": 30}
```

Основные методы работы со словарями:

- **Добавление или изменение элемента**:

    ```python
    person["город"] = "Москва"
    ```

- **Удаление элемента**:

    ```python
    del person["возраст"]
    ```

- **Доступ к элементу** по ключу:

    ```python
    print(person["имя"])  # Выведет: Алиса
    ```

- **Проверка наличия ключа**:

    ```python
    print("город" in person)  # Выведет: True
    ```


У словарей значение может быть практически любым типом данных, включая другие словари (объекты),
списки (массивы), и переменные:

Словари внутри словаря

```python
person = {
    "имя": "Алиса",
    "возраст": 30,
    "адрес": {
        "город": "Москва",
        "улица": "Тверская"
    }
}

# Доступ к данным во вложенном словаре
print(person["адрес"]["город"])
```

Списки внутри словаря

```python
person = {
    "имя": "Алиса",
    "возраст": 30,
    "хобби": ["путешествия", "фотография", "чтение"]
}

# Доступ к элементу списка внутри словаря
print(person["хобби"][1])  # Выведет: фотография
```

Переменные как значения в словаре

```python
name = "Алиса"
age = 30

person = {
    "имя": name,
    "возраст": age
}

print(person["имя"])  # Выведет: Алиса
print(person["возраст"])  # Выведет: 30
```

Добавление и изменение элементов

- Добавление нового хобби в список "хобби":

```python
person["хобби"].append("рисование")
print(person["хобби"])  # Выведет: ['путешествия', 'фотография', 'чтение', 'рисование']
```

- Изменение города в адресе:

```python
person["адрес"]["город"] = "Санкт-Петербург"
print(person["адрес"]["город"])  # Выведет: Санкт-Петербург
```

Удаление элементов

- Удаление элемента из списка "хобби":

```python
person["хобби"].remove("чтение")
print(person["хобби"])  # Выведет: ['путешествия', 'фотография', 'рисование']
```

- Удаление пары "ключ-значение" из словаря:

```python
del person["возраст"]
print(person)  # Выведет словарь без пары "возраст"
```

### **Кортежи**

Кортеж — это неизменяемая упорядоченная коллекция элементов. Похож на список,
 но не позволяет изменять элементы после создания.

Создание кортежа:

```python
coordinates = (10, 20, 30)
```

Работа с кортежами:

- **Доступ к элементу** по индексу:

    ```python
    print(coordinates[1])  # Выведет: 20
    ```

- Кортежи **не поддерживают изменение элементов**, попытка это сделать вызовет ошибку.